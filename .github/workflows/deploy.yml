# Croatian Labor Law Fact Checker - GitHub Pages Deployment
name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g htmlhint stylelint eslint
          npm install -g clean-css-cli terser

      - name: Validate HTML
        run: |
          htmlhint index.html --config .htmlhintrc || true
          echo "HTML validation completed"

      - name: Validate CSS
        run: |
          stylelint "src/styles/**/*.css" --config .stylelintrc.json || true
          echo "CSS validation completed"

      - name: Validate JavaScript
        run: |
          eslint "src/scripts/**/*.js" --config .eslintrc.json || true
          echo "JavaScript validation completed"

      - name: Optimize assets
        run: |
          # Minify CSS
          mkdir -p dist/src/styles
          cleancss -o dist/src/styles/neumorphism.min.css src/styles/neumorphism.css
          cleancss -o dist/src/styles/style.min.css src/styles/style.css
          cleancss -o dist/src/styles/enhanced.min.css src/styles/enhanced.css
          
          # Minify JavaScript
          mkdir -p dist/src/scripts
          mkdir -p dist/src/core
          mkdir -p dist/src/utils
          terser src/scripts/i18n.js -o dist/src/scripts/i18n.min.js --compress --mangle
          terser src/scripts/search.js -o dist/src/scripts/search.min.js --compress --mangle
          terser src/scripts/main.js -o dist/src/scripts/main.min.js --compress --mangle
          terser src/scripts/security.js -o dist/src/scripts/security.min.js --compress --mangle
          terser src/scripts/gdpr.js -o dist/src/scripts/gdpr.min.js --compress --mangle
          terser src/scripts/feedback.js -o dist/src/scripts/feedback.min.js --compress --mangle
          terser src/scripts/tests.js -o dist/src/scripts/tests.min.js --compress --mangle
          terser src/core/LegalDatabase.js -o dist/src/core/LegalDatabase.min.js --compress --mangle
          terser src/core/SearchEngine.js -o dist/src/core/SearchEngine.min.js --compress --mangle
          terser src/utils/TextProcessor.js -o dist/src/utils/TextProcessor.min.js --compress --mangle
          terser src/utils/CacheManager.js -o dist/src/utils/CacheManager.min.js --compress --mangle
          terser src/utils/ExportManager.js -o dist/src/utils/ExportManager.min.js --compress --mangle
          terser src/utils/Validator.js -o dist/src/utils/Validator.min.js --compress --mangle
          
          # Copy data files
          mkdir -p dist/src/data
          cp -r src/data/* dist/src/data/
          
          # Copy assets
          mkdir -p dist/public
          cp -r public/* dist/public/ 2>/dev/null || mkdir -p dist/public/assets
          
          # Copy other important files
          cp manifest.json dist/ 2>/dev/null || true
          cp sw.js dist/ 2>/dev/null || true
          
          # Create optimized index.html
          sed 's/src\/styles\/neumorphism\.css/src\/styles\/neumorphism.min.css/g; s/src\/styles\/style\.css/src\/styles\/style.min.css/g; s/src\/styles\/enhanced\.css/src\/styles\/enhanced.min.css/g; s/src\/scripts\/i18n\.js/src\/scripts\/i18n.min.js/g; s/src\/scripts\/search\.js/src\/scripts\/search.min.js/g; s/src\/scripts\/main\.js/src\/scripts\/main.min.js/g; s/src\/scripts\/security\.js/src\/scripts\/security.min.js/g; s/src\/scripts\/gdpr\.js/src\/scripts\/gdpr.min.js/g; s/src\/scripts\/feedback\.js/src\/scripts\/feedback.min.js/g; s/src\/scripts\/tests\.js/src\/scripts\/tests.min.js/g; s/src\/core\/LegalDatabase\.js/src\/core\/LegalDatabase.min.js/g; s/src\/core\/SearchEngine\.js/src\/core\/SearchEngine.min.js/g; s/src\/utils\/TextProcessor\.js/src\/utils\/TextProcessor.min.js/g; s/src\/utils\/CacheManager\.js/src\/utils\/CacheManager.min.js/g; s/src\/utils\/ExportManager\.js/src\/utils\/ExportManager.min.js/g; s/src\/utils\/Validator\.js/src\/utils\/Validator.min.js/g' index.html > dist/index.html
          
          echo "Asset optimization completed"

      - name: Generate sitemap
        run: |
          cat > dist/sitemap.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/</loc>
              <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          echo "Sitemap generated"

      - name: Generate robots.txt
        run: |
          cat > dist/robots.txt << 'EOF'
          User-agent: *
          Allow: /
          
          Sitemap: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/sitemap.xml
          EOF
          echo "Robots.txt generated"

      - name: Create manifest.json
        run: |
          cat > dist/manifest.json << 'EOF'
          {
            "name": "Croatian Labor Law Fact Checker",
            "short_name": "HR Labor Law",
            "description": "Comprehensive tool for checking Croatian workers' rights and labor laws",
            "start_url": "/",
            "display": "standalone",
            "background_color": "#ffffff",
            "theme_color": "#ffffff",
            "icons": [
              {
                "src": "assets/icons/icon-192.png",
                "sizes": "192x192",
                "type": "image/png"
              },
              {
                "src": "assets/icons/icon-512.png", 
                "sizes": "512x512",
                "type": "image/png"
              }
            ]
          }
          EOF
          echo "PWA manifest created"

      - name: Create service worker
        run: |
          cat > dist/sw.js << 'EOF'
          const CACHE_NAME = 'croatian-labor-law-v1';
          const urlsToCache = [
            '/',
            '/css/neumorphism.min.css',
            '/css/style.min.css',
            '/js/i18n.min.js',
            '/js/database.min.js',
            '/js/search.min.js',
            '/js/main.min.js',
            '/data/croatian-labor-law.json',
            '/data/translations.json'
          ];

          self.addEventListener('install', event => {
            event.waitUntil(
              caches.open(CACHE_NAME)
                .then(cache => cache.addAll(urlsToCache))
            );
          });

          self.addEventListener('fetch', event => {
            event.respondWith(
              caches.match(event.request)
                .then(response => {
                  if (response) {
                    return response;
                  }
                  return fetch(event.request);
                }
              )
            );
          });
          EOF
          echo "Service worker created"

      - name: Run performance audit
        run: |
          # Install Lighthouse CI
          npm install -g @lhci/cli
          
          # Start server for testing
          cd dist
          python3 -m http.server 9090 &
          cd ..
          sleep 5
          
          # Create Lighthouse CI config
          cat > lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "url": ["http://localhost:9090"],
                "startServerCommand": "cd dist && python3 -m http.server 9090",
                "numberOfRuns": 1
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.8}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["warn", {"minScore": 0.8}],
                  "categories:seo": ["warn", {"minScore": 0.8}]
                }
              }
            }
          }
          EOF
          
          # Run Lighthouse audit
          lhci autorun || true
          echo "Performance audit completed"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Post-deployment verification
  verify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Site URL: ${{ needs.deploy.outputs.url }}"
          
          # Wait for deployment to be available
          sleep 30
          
          # Basic health check
          curl -I "${{ needs.deploy.outputs.url }}" || echo "Health check completed"
          
          echo "Verification completed"
